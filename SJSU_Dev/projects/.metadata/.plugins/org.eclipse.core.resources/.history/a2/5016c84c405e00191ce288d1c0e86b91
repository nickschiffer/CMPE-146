/*
 *     SocialLedge.com - Copyright (C) 2013
 *
 *     This file is part of free software framework for embedded processors.
 *     You can use it and/or distribute it as long as this copyright header
 *     remains unmodified.  The code is free for personal use and requires
 *     permission to use in a commercial product.
 *
 *      THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
 *      OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
 *      MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
 *      I SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
 *      CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 *
 *     You can reach the author of this software at :
 *          p r e e t . w i k i @ g m a i l . c o m
 */

/**
 * @file
 * @brief This is the application entry point.
 */

#include <stdio.h>
#include "utilities.h"
#include "io.hpp"
#include <tasks.hpp>
#include <time.h>
#include <ctime>
#include <storage.hpp>
#include <string>
#include <sstream>

#define PRODUCER_BIT (1 << 0)
#define CONSUMER_BIT (1 << 1)


typedef struct {
    uint16_t avg;
    time_t time;
} light_entry_t;




void vProducerTask(void *pvParameters){

    QueueHandle_t sensor_queue = (QueueHandle_t) pvParameters;
    Light_Sensor light_sensor = Light_Sensor::getInstance();
    light_sensor.init();
    uint8_t counter = 0;
    uint32_t sum = 0;
    light_entry_t entry = {0, 0};
    time_t start_time = time(NULL);
    while(1){
        if (counter == 99){
            entry.avg = sum/100;
            entry.time = time(NULL) - start_time;
            xQueueSend(sensor_queue, &entry, portMAX_DELAY);
            sum = counter = 0;
        }
        else{
            sum += light_sensor.getRawValue();
            counter++;
            vTaskDelay(1);
        }

    }

}

void vConsumerTask(void *pvParameters){
    QueueHandle_t sensor_queue = (QueueHandle_t) pvParameters;
    light_entry_t entry = {0,0};
    uint8_t counter = 0;
    tm *tm_local;
    std::string buffer = "";
    std::stringstream oss;

    auto sd_card = Storage::getSDDrive();

    char string[BUFSIZ + 1] = {0};

    while(1){
        xQueueReceive(sensor_queue, &entry, portMAX_DELAY);
        tm_local = localtime(&entry.time);
        snprintf(&string[0], BUFSIZ, "received %d, %02d:%02d:%02d\n", entry.avg, tm_local->tm_hour, tm_local->tm_min, tm_local->tm_sec);
        buffer += string;
        //printf("received %d, %02d:%02d:%02d\n", entry.avg, tm_local->tm_hour, tm_local->tm_min, tm_local->tm_sec);
        counter++;

        if (counter == 10){
            unsigned int drive_space, available_space;
            sd_card.getDriveInfo(&drive_space,&available_space);
            //printf("drive space: %u, available space: %u\n", drive_space, available_space);
            printf("%s", buffer.c_str());
            counter = 0;

//            Storage::append("test.txt", )
        }


    }
}

void vWatchDogTask(void *pvParameters){

}

int main(void)
{
    QueueHandle_t sensor_queue =  xQueueCreate(1, sizeof(light_entry_t));
    scheduler_add_task(new terminalTask(PRIORITY_HIGH));


    xTaskCreate(vProducerTask, "Producer", 1024, (void *)sensor_queue, PRIORITY_MEDIUM, NULL);
    xTaskCreate(vConsumerTask, "Consumer", 1024, (void *)sensor_queue, PRIORITY_MEDIUM, NULL);
//    xTaskCreate(vWatchDogTask, "Watchdog", 1024, NULL, PRIORITY_HIGH, NULL);
    scheduler_start();
    return -1;
}
