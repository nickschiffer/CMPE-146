/*
 * main.cpp
 *
 *  Created on: Feb 24, 2019
 *      Author: Nick
 */

#include "SPI/LabSpi.hpp"
#include "tasks.hpp"
#include "stdio.h"
#include "FreeRTOS.h"

uint8_t *mode1 = new uint8_t(1);
uint8_t *mode2 = new uint8_t(2);
SemaphoreHandle_t mutex = xSemaphoreCreateMutex();
GPIO_0_1_2 CS = GPIO_0_1_2(0,6);

void vReadFlash(void *pvParameters){
    uint8_t mode = *((uint8_t*) pvParameters);
    LabSpi spi = LabSpi();
    spi.initialize(16, LabSpi::tSPI, 12);
    uint8_t manufacture_id;
    uint8_t device_id_1;
    uint8_t device_id_2;
    while (1){
        if (xSemaphoreTake(mutex, portMAX_DELAY)){
            CS.setLow();
            manufacture_id = spi.transfer(0x9F);
            device_id_1 = spi.transfer(0xFF);
            device_id_2 = spi.transfer(0xFF);
            CS.setHigh();
            xSemaphoreGive(mutex);
            //printf("Manufacture ID %d: %X\nDeviceID1: %X\nDeviceID2: %X\n\n", mode, manufacture_id, device_id_1, device_id_2);
        }
        vTaskDelay(1000);
    }
}

void vCheckStatus(void *pvParameters){
    LabSpi spi = LabSpi();
    spi.initialize(16, LabSpi::tSPI, 12);
    LabSpi::SPI_SR_t status;


    while(1){
        if (xSemaphoreTake(mutex,portMAX_DELAY)){
            CS.setLow();
            status.byte1 = spi.transfer(0xD7);
            status.byte2 = spi.transfer(0xD7);
            CS.setHigh();
            xSemaphoreGive(mutex);

            if (status.READY)
                printf("Device is Ready.\n");
            else
                printf("Device is Busy with an internal operation.\n");

            if (status.COMP)
                printf("Main memory page data does not match buffer data.\n");
            else
                printf("Main memory page data matches buffer data.\n");

            printf("Density: %d-Mbit\n", status.DENSITY);

            if (status.PROTECT)
                printf("Sector protection is enabled.\n");
            else
                printf("Sector protection is disabled.\n");

            if (status.PAGE_SIZE)
                printf("Device is configured for “power of 2” binary page size (512 bytes).\n");
            else
                printf("Device is configured for standard DataFlash page size (528 bytes).\n");

            if (status.EPE)
                printf("Erase or program error detected.\n");
            else
                printf("Erase or program operation was successful.\n");

            if (status.SLE)
                printf("Sector Lockdown command is enabled.\n");
            else
                printf("Sector Lockdown command is disabled.\n");


        }
        status.byte1 = (uint8_t)(LPC_SSP1->SR & 0xFF);
        //status.BUSY ? printf("SPI Flash is currently busy\n\n") : printf("SPI Flash is currently NOT busy\n\n");
        if (status.BUSY)
            printf("SPI is currently Busy\n\n");
        //vTaskDelay(1);
    }
}


int main(){
    CS.setAsOutput();
    CS.setHigh();
    scheduler_add_task(new terminalTask(PRIORITY_HIGH));
    xTaskCreate(vReadFlash, "Read1", 1024, (void *)mode1, PRIORITY_LOW, NULL);
    xTaskCreate(vReadFlash, "Read2", 1024, (void *)mode2, PRIORITY_LOW, NULL);
    xTaskCreate(vCheckStatus, "Status", 1024, NULL, PRIORITY_LOW, NULL);
    scheduler_start();
    return -1;
}



