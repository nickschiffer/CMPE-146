/*
 * GPIOInterrupt.cpp
 *
 *  Created on: Feb 16, 2019
 *      Author: Nick Schiffer
 */

#include "GPIOInterrupt.hpp"
#include <LPC17xx.h>
#include "GPIO_0_1_2.hpp"
#include <printf_lib.h>

GPIOInterrupt::GPIOInterrupt()
{
}

GPIOInterrupt& GPIOInterrupt::getInstance()
{

    static GPIOInterrupt instance;
    return instance;
}

void GPIOInterrupt::Initialize()
{
    NVIC_EnableIRQ(EINT3_IRQn);
}

bool GPIOInterrupt::AttachInterruptHandler(uint8_t port, uint32_t pin, IsrPointer pin_isr, InterruptCondition condition)
{
        switch(port){
            case 0:{
                //check if valid port 0 pin
                if ((((pin >= 0) && (pin <= 11)) || ((pin >= 15) && (pin <= 30)))){

                    //store ISR pointer in map
                    GPIOInterrupt::pin_isr_map[0][pin] = (IsrPointer)pin_isr;



                    switch(condition){
                        case kRisingEdge:{
                            LPC_GPIOINT->IO0IntEnR |=  (1 << pin);
                            LPC_GPIOINT->IO0IntEnF &= ~(1 << pin);
                        }
                            break;
                        case kFallingEdge:{
                            LPC_GPIOINT->IO0IntEnR &= ~(1 << pin);
                            LPC_GPIOINT->IO0IntEnF |=  (1 << pin);
                        }
                            break;
                        case kBothEdges:{
                            LPC_GPIOINT->IO0IntEnR |= (1 << pin);
                            LPC_GPIOINT->IO0IntEnF |= (1 << pin);
                        }
                            break;
                        default:
                            return -1;
                    }

                }
                else
                    return 1;
                break;
            }
            case 2:{
                //check if valid port 2 pin
                if (((pin >= 0) && (pin <= 13))){

                    pin_isr_map[1][pin] = (IsrPointer)pin_isr;

                    //view contents of map
                    u0_dbg_printf("size of map: %d\nsize of address: %d\n\n", sizeof(pin_isr_map), sizeof(pin_isr));
                    for (int i = 0; i <= 30; i++){
                        u0_dbg_printf("ISR pointer: %d: %d\n\n", i, pin_isr_map[1][i]);
                    }

                    switch(condition){
                        case kRisingEdge:{
                            LPC_GPIOINT->IO2IntEnR |=  (1 << pin);
                            LPC_GPIOINT->IO2IntEnF &= ~(1 << pin);
                        }
                            break;
                        case kFallingEdge:{
                            LPC_GPIOINT->IO2IntEnR &= ~(1 << pin);
                            LPC_GPIOINT->IO2IntEnF |=  (1 << pin);
                        }
                            break;
                        case kBothEdges:{
                            LPC_GPIOINT->IO2IntEnR |= (1 << pin);
                            LPC_GPIOINT->IO2IntEnF |= (1 << pin);
                        }
                            break;
                        default:
                            return -1;
                    }
                }
                else
                    return 1;
                break;
            }
            default:
                return 1;
        }
        return 0;
}



void GPIOInterrupt::HandleInterrupt()
{
    NVIC_DisableIRQ(EINT3_IRQn);
    if (LPC_GPIOINT->IO0IntStatR){
        uint8_t counter = 0;
        uint32_t IO0R = LPC_GPIOINT->IO0IntStatR;
        while ((counter <= 32) && (IO0R)){
            if (IO0R % 2 != 0){
                LPC_GPIOINT->IO0IntClr = (1 << counter);
                pin_isr_map[0][counter]();
            }
            IO0R >>= 1;
            counter++;
        }

    }
    if (LPC_GPIOINT->IO0IntStatF){
        uint8_t counter = 0;
        uint32_t IO0F = LPC_GPIOINT->IO0IntStatF;
        while ((counter <= 32) && (IO0F)){
            if (IO0F % 2 != 0){
                LPC_GPIOINT->IO0IntClr = (1 << counter);
                pin_isr_map[0][counter]();
            }
            IO0F >>= 1;
            counter++;
        }
    }
    if (LPC_GPIOINT->IO2IntStatR){
        uint8_t counter = 0;
        uint32_t IO2R = LPC_GPIOINT->IO2IntStatR;
        u0_dbg_printf("Pre-Handling. IO2R: %d, Counter: %d\n\n", IO2R, counter);
        while ((counter <= 32) && (IO2R)){
            u0_dbg_printf("Handling. IO2R: %d, Counter: %d\n\n", IO2R, counter);
            if (IO2R % 2 != 0){
                u0_dbg_printf("Found 1. IO2R: %d, Counter: %d\n\n", IO2R, counter);
                LPC_GPIOINT->IO2IntClr = (1 << counter);
                u0_dbg_printf("Cleared.\nisr name: %d\n", pin_isr_map[1][counter]);


                //view contents of map
                for (int i = 0; i <= 30; i++){
                    u0_dbg_printf("ISR pointer: %d: %d\n\n", i, pin_isr_map[1][i]);
                }


                (pin_isr_map[1][counter])(); //This line is crashing
                u0_dbg_printf("Executed.\n");
            }
            IO2R >>= 1;
            counter++;
        }

    }
    if (LPC_GPIOINT->IO2IntStatF){
        uint8_t counter = 0;
        uint32_t IO2F = LPC_GPIOINT->IO2IntStatF;
        while ((counter <= 32) && (IO2F)){
           if (IO2F % 2 != 0){
               LPC_GPIOINT->IO2IntClr = (1 << counter);
               pin_isr_map[1][counter]();
           }
           IO2F >>= 1;
           counter++;
       }

    }
    NVIC_EnableIRQ(EINT3_IRQn);
}

GPIOInterrupt::~GPIOInterrupt()
{
}

