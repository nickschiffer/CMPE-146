/*
 *     SocialLedge.com - Copyright (C) 2013
 *
 *     This file is part of free software framework for embedded processors.
 *     You can use it and/or distribute it as long as this copyright header
 *     remains unmodified.  The code is free for personal use and requires
 *     permission to use in a commercial product.
 *
 *      THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
 *      OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
 *      MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
 *      I SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
 *      CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 *
 *     You can reach the author of this software at :
 *          p r e e t . w i k i @ g m a i l . c o m
 */

/**
 * @file
 * @brief This is the application entry point.
 * 			FreeRTOS and stdio printf is pre-configured to use uart0_min.h before main() enters.
 * 			@see L0_LowLevel/lpc_sys.h if you wish to override printf/scanf functions.
 *
 */

/*
 * Nickolas Schiffer #012279319
 * CMPE 146 LED Interrupts, Semaphores, and Lookup Tables
 */

#include "tasks.hpp"
#include "GPIO/LabGPIO_0_1_2.hpp"
#include "LED_Display.hpp"
#include <stdio.h>


void interrupt_callback(void)
{
  // TODO: Clear the source of the EINT3 interrupt
  // Maybe uart0_puts() or blink and LED here to test your ISR
    uart0_puts("Interrupt Called.\n\n");
    LPC_GPIOINT->IO0IntClr &= ~(1 << 1);
}

int main(void)
{
  // Register your callback for the EINT3
  isr_register(EINT3_IRQn, interrupt_callback);
  NVIC_EnableIRQ(EINT3_IRQn);
  LPC_GPIOINT->IO2IntEnR |= (1);

  // Configure the registers to trigger Port2 interrupt (such as P2.0 rising edge)


  while (1)
  {
    continue; // Empty loop just to test the interrupt
  }
  return EXIT_FAILURE;
}

//    scheduler_start(); ///< This shouldn't return
//    return -1;
//}
