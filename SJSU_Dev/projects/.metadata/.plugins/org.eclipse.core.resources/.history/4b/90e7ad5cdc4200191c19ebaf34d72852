/*
 * UART_2_3.cpp
 *
 *  Created on: Mar 9, 2019
 *      Author: Nick
 */

#include <UART/UART_2_3.hpp>

LabUart::LabUart()
{
}

LabUart::~LabUart()
{
}

int LabUart::Initialize(UART_Device device, BAUD_Rate baud_rate,
        bool rx_interrupt, Frame_Size frame_size, Stop_Bit stop_bit, bool break_control,
        bool parity_enable, Parity_Mode parity_mode)
{
    switch (device){
        case U2:
            /*
             * Power on UART2 Device
             */
            LPC_SC->PCONP |= (1 << pconp_uart2);
            /*
             * Select Peripheral Clock
             */
            LPC_SC->PCLKSEL1 &= ~(1 << 17);
            LPC_SC->PCLKSEL1 |=  (1 << 16);
            /*
             * Select TX2{17:16 => 10} and RX2 pins{19:18 => 10}
             */
            LPC_PINCON->PINSEL4 |=  (1 << 17);
            LPC_PINCON->PINSEL4 &= ~(1 << 16);
            LPC_PINCON->PINSEL4 |=  (1 << 19);
            LPC_PINCON->PINSEL4 &= ~(1 << 18);
            /*
             * Enable pullup on TX pin (2.8)
             */
            LPC_PINCON->PINMODE4 &= ~(0b11 << 16); //00
            /*
             * Select requested frame size
             */
            switch (frame_size){
                case f5_bit:
                    /*
                     * Set frame size to 5 (00)
                     */
                    LPC_UART2->LCR &= ~(0b11 << 0);
                    break;
                case f6_bit:
                    /*
                     * Set frame size to 6 (01)
                     */
                    LPC_UART2->LCR &= ~(1 << 1);
                    LPC_UART2->LCR |=  (1 << 0);
                    break;
                case f7_bit:
                    /*
                     * Set frame size to 7 (10)
                     */
                    LPC_UART2->LCR &= ~(1 << 0);
                    LPC_UART2->LCR |=  (1 << 1);
                    break;
                case f8_bit:
                    /*
                     * Set frame size to 7 (11)
                     */
                    LPC_UART2->LCR |= (0b11 << 0);
                    break;
                default:
                    return Unspecified_Error;
            }
            /*
             * Select requested number of stop bits
             */
            switch (stop_bit){
                case s1_bit:
                    /*
                     * 1 stop bit
                     */
                    LPC_UART2->LCR &= ~(1 << 2);
                    break;
                case s2_bit:
                    /*
                     * 2 stop bits
                     */
                    LPC_UART2->LCR |=  (1 << 2);
                    break;
                default:
                    return Unspecified_Error;
            }
            /*
             * Enable Parity and parity mode if requested
             */
            if (parity_enable){
                LPC_UART2->LCR |= (1 << 3);
                switch (parity_mode){
                    case pOdd:
                        /*
                         * Odd parity. Number of 1s in the transmitted
                         * character and the attached parity bit will be odd.
                         */
                        LPC_UART2->LCR &= ~(0b11 << 4);
                        break;
                    case pEven:
                        /*
                         * Even Parity. Number of 1s in the transmitted
                         * character and the attached parity bit will be even.
                         */
                        break;
                    case pForced_1:
                        /*
                         *
                         */
                        break;
                    case pForced_2:
                        break;
                    default:
                        return Invalid_Parity_Config;
                }
            }

            break;
        case U3:
            break;
        default:
            return 1;
    }
}

int LabUart::Transmit(char c)
{
}

char LabUart::Receive()
{
}
