/*
 * Interrupts, Lookup Tables, Semaphores Lab
 * Nickolas Schiffer
 * CMPE 146
 * Interrupts, Lookup Tables, and Semaphores
 */

#include <GPIO/GPIOInterrupt.hpp>
#include <GPIO/GPIO_0_1_2.hpp>
#include "tasks.hpp"
#include <stdio.h>
#include <stdint.h>
#include <uart0_min.h>



uint16_t rising_counter  = 0;
uint16_t falling_counter = 0;


void Eint3Handler(){
    GPIOInterrupt *interruptHandler = GPIOInterrupt::getInstance();
    interruptHandler->HandleInterrupt();
}

void callback_func_1(){
    printf("Rising Edge Called: %d\n\n", (int)rising_counter++);
}

void callback_func_2(){
    printf("Falling Edge Called: %d\n\n", (int)falling_counter++);
//    uart0_puts("Falling Edge Called\n\n");
}

void callback_func_3(){
    printf("Both Edges Called\n\n");
}

int main(void)
{

  //Initialize GPIO ports as inputs
   auto sw1 = GPIO_0_1_2(2, 0);
   auto sw2 = GPIO_0_1_2(0, 0);

   sw1.setAsInput();
   sw2.setAsInput();

  // Initialize GPIOInterrupt Instance
  GPIOInterrupt *interruptHandler =  GPIOInterrupt::getInstance();
  interruptHandler->Initialize();
  isr_register(EINT3_IRQn, Eint3Handler);

  //Attach Handler to switches
  interruptHandler->AttachInterruptHandler(2, 0, (IsrPointer)callback_func_1, kRisingEdge);
  interruptHandler->AttachInterruptHandler(0, 0, (IsrPointer)callback_func_2, kFallingEdge);
//  interruptHandler->AttachInterruptHandler(2, 0, (IsrPointer)callback_func_3, kBothEdges);



  while (1)
  {

  }
  return EXIT_FAILURE;
}
