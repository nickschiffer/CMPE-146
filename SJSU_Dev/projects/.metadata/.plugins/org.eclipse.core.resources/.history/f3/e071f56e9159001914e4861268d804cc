/*
 *     SocialLedge.com - Copyright (C) 2013
 *
 *     This file is part of free software framework for embedded processors.
 *     You can use it and/or distribute it as long as this copyright header
 *     remains unmodified.  The code is free for personal use and requires
 *     permission to use in a commercial product.
 *
 *      THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
 *      OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
 *      MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
 *      I SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
 *      CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 *
 *     You can reach the author of this software at :
 *          p r e e t . w i k i @ g m a i l . c o m
 */

/**
 * @file
 * @brief This is the application entry point.
 */

#include <stdio.h>
#include "utilities.h"
#include "io.hpp"
#include <i2c2.hpp>
#include <tasks.hpp>

void vReadBuffer(void *pvParameters){
    while(1){
        printf("Buffer: %X\n", *buffer);
        vTaskDelay(1000);
    }
}

int main(void)
{


    I2C2& i2c = I2C2::getInstance();
    const uint8_t slaveAddr = 0xC0;
    volatile uint8_t buffer[256] = { 0 };
    i2c.initSlave(slaveAddr, &buffer[0], (size_t)sizeof(buffer));


    xTaskCreate(vReadBuffer, "ReadBuf", 1024, NULL, PRIORITY_LOW, NULL);
    scheduler_add_task(new terminalTask(PRIORITY_HIGH));

    scheduler_start();

    return -1;
}
