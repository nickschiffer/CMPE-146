/*
 *     SocialLedge.com - Copyright (C) 2013
 *
 *     This file is part of free software framework for embedded processors.
 *     You can use it and/or distribute it as long as this copyright header
 *     remains unmodified.  The code is free for personal use and requires
 *     permission to use in a commercial product.
 *
 *      THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
 *      OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
 *      MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
 *      I SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
 *      CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 *
 *     You can reach the author of this software at :
 *          p r e e t . w i k i @ g m a i l . c o m
 */

/**
 * @file
 * @brief This is the application entry point.
 */

#include <stdio.h>
#include "io.hpp"
#include <tasks.hpp>
#include <storage.hpp>
#include <string>
#include <event_groups.h>
#include <ff.h>
#include <cstring>
#include <task.h>
#include <str.hpp>


#define PRODUCER_BIT (1 << 1)
#define CONSUMER_BIT (1 << 2)


typedef struct {
    uint16_t avg;
    uint64_t time;
} light_entry_t;

typedef struct {
    QueueHandle_t *queue;
    EventGroupHandle_t *event_group;

} task_params_t;


QueueHandle_t sensor_queue     = xQueueCreate(1, sizeof(light_entry_t));
EventGroupHandle_t event_group = xEventGroupCreate();


CMD_HANDLER_FUNC(taskHandler){
    uint8_t numtasks = 0;
    bool sus_or_res = false;
    TaskHandle_t task_to_be_changed = NULL;
    auto c = cmdParams.getToken(" ", false);
    printf("Initial token: %s\n", c->c_str());
    if (c != NULL) {
        if (c->compareToIgnoreCase("suspend")) {
            sus_or_res = true;
            puts("compared to suspend == true");
            while (1) {
                auto t = cmdParams.getToken(" ", false);
                printf("first t: %s\n", t->c_str());
                if (t != NULL) {
                    printf("searching for %s\n", t->c_str());
                    task_to_be_changed = xTaskGetHandle(t->c_str());
                    if (task_to_be_changed != NULL) {
                        puts("suspending a task");
                        vTaskSuspend(task_to_be_changed);
                            numtasks++;
                    }
                    else {
                        printf("Task \"%s\" not found\n", t->c_str());
                        break;
                    }
                }
                else {
                    puts("t was null");
                    break;
                }
            }
        }
        else if (c->compareToIgnoreCase("resume")) {
            while (1) {
                auto t = cmdParams.getToken(" ");
                if (t != NULL) {
                    task_to_be_changed = xTaskGetHandle(t->c_str());
                    if (task_to_be_changed != NULL) {
                        puts("resuming a task");
                        vTaskResume(task_to_be_changed);
                            numtasks++;
                    }
                    else {
                        printf("Task \"%s\" not found\n", t->c_str());
                    }
                }
                else {
                    break;
                }
            }

        }
        else {
            puts("No command given.");
            return 0;
        }

    }
    else{
        puts("something happened");
    }
    printf("%d tasks %s\n", numtasks, sus_or_res ? "suspended" : "resumed");
    cmdParams.clear();
    return 1;
}

void vTokenizer(void *pvParameters){

    while(1){
        str string = "Hello my name is Simon";
        str *token = nullptr;

        while (1){
            auto t = string.getToken(" ", false);
            if (t != NULL){
                puts(t->c_str());
            }
            else {
                break;
            }

        }
        vTaskDelay(100);
    }
}

void vProducerTask(void *pvParameters){

//    task_params_t *params = (task_params_t *)(pvParameters);
//    printf("sensor queue: %X, Event Group: %X\n", &(params->queue), &(params->event_group));
//    QueueHandle_t *sensor_queue = (params->queue);
//    EventGroupHandle_t *event_group = (params->event_group);
//    printf("sensor queue: %X, Event Group: %X\n", *sensor_queue, *event_group);
//    QueueHandle_t sensor_queue = params->queue;
//    EventGroupHandle_t event_group = params->event_group;
    //QueueHandle_t sensor_queue = (QueueHandle_t) pvParameters;
    Light_Sensor light_sensor = Light_Sensor::getInstance();
    light_sensor.init();
    uint8_t counter = 0;
    uint32_t sum = 0;
    light_entry_t entry = {0, 0};
    uint64_t start_time = xTaskGetMsCount();

    while(1){

        if (counter == 99){
            entry.avg = (uint16_t)sum/100;
            entry.time = (uint64_t)xTaskGetMsCount() - start_time;
            //printf("%lu, %lu\n", entry.time, entry.avg);
            xQueueSend(sensor_queue, &entry, portMAX_DELAY);
            sum = counter = 0;
        }
        else{
            sum += light_sensor.getRawValue();
            counter++;
            vTaskDelay(1);
        }
        xEventGroupSetBits(event_group,PRODUCER_BIT);



    }

}

void vConsumerTask(void *pvParameters){
    //QueueHandle_t sensor_queue = (QueueHandle_t) pvParameters;
    light_entry_t entry = {0,0};
    uint8_t counter = 0;
    std::string buffer = "";

    char string[BUFSIZ + 1] = {0};

    while(1){
        xQueueReceive(sensor_queue, &entry, portMAX_DELAY);
        snprintf(&string[0], BUFSIZ, "%lu, %u\n", (unsigned long)entry.time, entry.avg);
        //printf("%lu, %u\n", (unsigned long)entry.time, entry.avg);
        buffer += string;
        counter++;
        if (counter == 10){
            counter = 0;
            Storage::append("1:test.txt", buffer.c_str(), buffer.size());
            buffer.clear();
        }
        xEventGroupSetBits(event_group,CONSUMER_BIT);


    }
}

void vWatchDogTask(void *pvParameters){
    std::string buffer = "";
    char string[BUFSIZ + 1] = {0};
    while(1){
        EventBits_t bits = xEventGroupWaitBits(
                event_group,
                PRODUCER_BIT | CONSUMER_BIT,
                pdTRUE,
                pdTRUE,
                1000 );
        if (!(bits & (PRODUCER_BIT))){
            if ((!(bits & (CONSUMER_BIT)))){
                //both bits unset
                snprintf(&string[0], BUFSIZ, "time: %lu: Both Tasks are Stuck.\n", xTaskGetMsCount());
                buffer += string;
                Storage::append("1:stuck.txt", buffer.c_str(), buffer.size());
                memset(string,0,sizeof(string));
                buffer.clear();
                puts("Producer and Consumer Stuck");
            }
            else {
                //just producer unset
                snprintf(&string[0], BUFSIZ, "time: %lu: Producer Task is Stuck.\n", xTaskGetMsCount());
                buffer += string;
                Storage::append("1:stuck.txt", buffer.c_str(), buffer.size());
                memset(string,0,sizeof(string));
                buffer.clear();
                puts("Producer Stuck");
            }
        }
        else if (!(bits & (CONSUMER_BIT))){
            //just consumer unset
            snprintf(&string[0], BUFSIZ, "time: %lu: Consumer Task is Stuck.\n", xTaskGetMsCount());
            buffer += string;
            Storage::append("1:stuck.txt", buffer.c_str(), buffer.size());
            memset(string,0,sizeof(string));
            buffer.clear();
            puts("Consumer Stuck");
        }

    }
}

int main(void)
{


//    task_params_t task_params = {&sensor_queue, &event_group};
//    task_params_t *params_ptr = &task_params;


    scheduler_add_task(new terminalTask(PRIORITY_HIGH));

    f_unlink("1:test.txt");
    f_unlink("1:stuck.txt");


    TaskHandle_t producer_handle, consumer_handle, watchdog_handle;

    xTaskCreate(vProducerTask, "producer", 1024, NULL, PRIORITY_MEDIUM, &producer_handle);
    xTaskCreate(vConsumerTask, "consumer", 1024, NULL, PRIORITY_MEDIUM, &consumer_handle);
    xTaskCreate(vWatchDogTask, "watchdog", 1024, NULL, PRIORITY_HIGH, &watchdog_handle);
//      xTaskCreate(vTokenizer, "Tokenizer", 1024, NULL, PRIORITY_LOW, NULL);


//    printf("FROM MAIN addr: sensor queue: %X, Event Group: %X\n", &sensor_queue, &event_group);
//    printf("FROM MAIN: sensor queue: %X, Event Group: %X\n", sensor_queue, event_group);
//    printf("FROM MAIN: task_params->sensor queue: %X, task_params->Event Group: %X\n", params_ptr->queue, params_ptr->event_group);
    scheduler_start();
    return -1;
}
