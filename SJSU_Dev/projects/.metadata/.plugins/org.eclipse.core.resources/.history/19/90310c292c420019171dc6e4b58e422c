/*
 *  Nickolas Schiffer
 *  CMPE 146 S19
 *  Lab: UART: part0
 */

/**
 * @file
 * @brief This is the application entry point.
 */

#include <stdio.h>
#include <LPC17xx.h>
#include "utilities.h"
#include "io.hpp"
#include <tasks.hpp>
#include <string.h>

#define TEST_STRING_LENGTH    29
#define BAUD_RATE          38400
uint32_t sys_clock = sys_get_cpu_clock();

char *string = (char *)malloc((TEST_STRING_LENGTH + 1)*sizeof(char));

uint8_t string_iterator = 0;
QueueHandle_t tx_queue;

void my_uart2_rx_intr(void)
{
  // TODO: Queue your data and clear UART Rx interrupt
    while (1){
        char c = string[string_iterator];
        printf("Enqueuing %c\n", c);
        xQueueSend(tx_queue, &c, 100);
        string_iterator = (string_iterator + 1) % 30;

    }
}

void init_my_uart2(void)
{
  // Init PINSEL, baud rate, frame size, etc.
    /*
     * Power on UART2 Device
     */
    LPC_SC->PCONP |= (1 << pconp_uart2);
    /*
     * Select Peripheral Clock
     */
    LPC_SC->PCLKSEL1 &= ~(0b11 << 16); // /4
    /*
     * Select TX2{17:16 => 10} and RX2 pins{19:18 => 10}
     */
    LPC_PINCON->PINSEL4 |=  (1 << 17);
    LPC_PINCON->PINSEL4 &= ~(1 << 16);
    LPC_PINCON->PINSEL4 |=  (1 << 19);
    LPC_PINCON->PINSEL4 &= ~(1 << 18);
    /*
     * Set frame size to 8
     */
    LPC_UART2->LCR |= (0b11 << 0);
    /*
     * 1 Stop bit
     */
    LPC_UART2->LCR &= ~(1 << 2);
    /*
     * Disable Parity Bit
     */
    LPC_UART2->LCR &= ~(1 << 3);
    /*
     * Disable Break Control
     */
    LPC_UART2->LCR &= ~(1 << 6);
    /*
     * Set baud rate for 38400bps (see baud rate formula)
     */
    uint32_t pclk = sys_clock >> 2;
    uint16_t dl = (pclk / ((uint16_t)BAUD_RATE << 4));
    /*
     * Set DLAB bit to 1 to access DLL and DLM registers
     */
    LPC_UART2->LCR |= (1 << 7);
    /*
     * Set DLM and DLL registers
     */
    LPC_UART2->DLL = (uint8_t)(dl & 0xFF);




  // Init UART Rx interrupt (TX interrupt is optional)
  //isr_register(Uart2, my_uart2_rx_intr);
    isr_register(UART2_IRQn, my_uart2_rx_intr);
}

void vUART_RX(void *pvParameters)
{
  char c;
  while (1) {
    if (xQueueReceive(tx_queue, &c, 100)) {
      printf("Got %c char from my UART... job is half done!\n", c);
    }
    else{
        printf("RX Queue Empty.\n\n");
    }
  }
}

void vUART_TX(void *pvParameters){

}

int main(void)
{
  strcpy(string, "This is a test or something.\n");
  tx_queue = xQueueCreate(TEST_STRING_LENGTH + 1, sizeof(char));
  init_my_uart2();
  xTaskCreate(vUART_RX,"UART Test",1000, NULL,PRIORITY_LOW, NULL);
  scheduler_start();
  return -1;
}
