/*
 * UART_2_3.cpp
 *
 *  Created on: Mar 9, 2019
 *      Author: Nick
 */

#include <UART/UART_2_3.hpp>

LabUart::LabUart()
{
}

LabUart::~LabUart()
{
}

int LabUart::Initialize(UART_Device device, BAUD_Rate baud_rate,
        bool rx_interrupt, Frame_Size frame_size, Stop_Bit stop_bit, bool break_control,
        bool parity_enable, Parity_Mode parity_mode)
{
    switch (device){
        case U2:
            /*
             * Power on UART2 Device
             */
                LPC_SC->PCONP |= (1 << pconp_uart2);
            /*
             * Select Peripheral Clock
             */
                LPC_SC->PCLKSEL1 &= ~(1 << 17);
                LPC_SC->PCLKSEL1 |=  (1 << 16);
            /*
             * Select TX2{17:16 => 10} and RX2 pins{19:18 => 10}
             */
                LPC_PINCON->PINSEL4 |=  (1 << 17);
                LPC_PINCON->PINSEL4 &= ~(1 << 16);
                LPC_PINCON->PINSEL4 |=  (1 << 19);
                LPC_PINCON->PINSEL4 &= ~(1 << 18);
            /*
             * Enable pullup on TX pin (2.8)
             */
                LPC_PINCON->PINMODE4 &= ~(0b11 << 16); // 00
            /*
             * Select requested frame size
             */
                switch (frame_size){
                    case f5_bit:
                        /*
                         * Set frame size to 5 (00)
                         */
                        LPC_UART2->LCR &= ~(0b11 << 0);
                        break;
                    case f6_bit:
                        /*
                         * Set frame size to 6 (01)
                         */
                        LPC_UART2->LCR &= ~(1 << 1);
                        LPC_UART2->LCR |=  (1 << 0);
                        break;
                    case f7_bit:
                        /*
                         * Set frame size to 7 (10)
                         */
                        LPC_UART2->LCR &= ~(1 << 0);
                        LPC_UART2->LCR |=  (1 << 1);
                        break;
                    case f8_bit:
                        /*
                         * Set frame size to 7 (11)
                         */
                        LPC_UART2->LCR |= (0b11 << 0);
                        break;
                    default:
                        return Unspecified_Error;
                }
            /*
             * Select requested number of stop bits
             */
                switch (stop_bit){
                    case s1_bit:
                        /*
                         * 1 stop bit
                         */
                        LPC_UART2->LCR &= ~(1 << 2);
                        break;
                    case s2_bit:
                        /*
                         * 2 stop bits
                         */
                        LPC_UART2->LCR |=  (1 << 2);
                        break;
                    default:
                        return Unspecified_Error;
                }
            /*
             * Enable Parity and parity mode if requested
             */
                if (parity_enable){
                    LPC_UART2->LCR |= (1 << 3);
                    switch (parity_mode){
                        case pOdd:
                            /*
                             * Odd parity. Number of 1s in the transmitted
                             * character and the attached parity bit will be odd.
                             */
                            LPC_UART2->LCR &= ~(0b11 << 4);
                            break;
                        case pEven:
                            /*
                             * Even Parity. Number of 1s in the transmitted
                             * character and the attached parity bit will be even.
                             */
                            LPC_UART2->LCR &= ~(0b11 << 4);
                            LPC_UART2->LCR |=  (1 << 4);
                            break;
                        case pForced_1:
                            /*
                             * Forced "1" stick parity.
                             */
                            LPC_UART2->LCR &= ~(0b11 << 4);
                            LPC_UART2->LCR |=  (1 << 5);
                            break;
                        case pForced_2:
                            /*
                             * Forced "0" stick parity.
                             */
                            LPC_UART2->LCR |= (0b11 << 4);
                            break;
                        default:
                            return Invalid_Parity_Config;
                    }
                }
                else {
                    LPC_UART2->LCR &= ~(1 << 3);
                    if (parity_mode != pNone)
                        return Invalid_Parity_Config;
                }
            /*
             * Enable Break Control if Requested
             */
                break_control ? (LPC_UART2->LCR |= (1 << 6)) : (LPC_UART2->LCR &= ~(1 << 6));
            /*
             * Set requested baud rate (see baud rate formula)
             */
                uint32_t pclk;
                switch ((LPC_SC->PCLKSEL1 >> 16) & 0x3){
                    case clkdiv_1:
                        pclk = sys_get_cpu_clock();
                        break;
                    case clkdiv_2:
                        pclk = sys_get_cpu_clock() >> 1;
                        break;
                    case clkdiv_4:
                        pclk = sys_get_cpu_clock() >> 2;
                        break;
                    case clkdiv_8:
                        pclk = sys_get_cpu_clock() >> 3;
                        break;
                    default:
                        return Unspecified_Error;
                }
                uint16_t dl = (uint16_t)(pclk / ((uint32_t)baud_rate << 4));
                    /*
                     * Set DLAB bit to 1 to access DLL and DLM registers
                     */
                    LPC_UART2->LCR |= (1 << 7);
                    /*
                     * Set DLM and DLL registers
                     */
                    LPC_UART2->DLL = (dl & 0xFF);
                    LPC_UART2->DLM = ((dl >> 8) & 0xFF);
            /*
             * Enable RX Interrupt if requested
             */
                /*
                 * Enable RX Interrupt (need to set DLAB to 0 first)
                 */
                LPC_UART2->LCR &= ~(1 << 7);
                rx_interrupt ? (LPC_UART2->IER |=  (1 << 0)) : (LPC_UART2->IER &= ~(1 << 0));
            /*
             * Start FIFO Queues and reset TX & RX Buffers
             */
                LPC_UART2->FCR |= (1 << 0);
                LPC_UART2->FCR |= ((1 << 1) | (1 << 2));
            /*
             * Enable RX Status Line Interrupts
             */
                LPC_UART2->IER |= (1 << 2);
            return Success;
        case U3:
            break;
        default:
            return 1;
    }
}

int LabUart::Transmit(char c)
{
}

char LabUart::Receive()
{
}
