/*
 *  Nickolas Schiffer
 *  CMPE 146 S19
 *  Lab: UART: part0
 */

/**
 * @file
 * @brief This is the application entry point.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <LPC17xx.h>
#include "utilities.h"
#include "io.hpp"
#include <tasks.hpp>
#include <string.h>
#include <switches.hpp>
#include <UART/UART_0_1_2_3.hpp>

#define TEST_STRING_LENGTH    29
#define BAUD_RATE          38400


#define LOW  false
#define HIGH true
uint8_t dig1 = 0;
uint8_t dig2 = 0;

typedef enum operation {
    add,
    sub,
    mult
};
//uint32_t sys_clock = sys_get_cpu_clock();

char string[] = "This is a test or something.\n";
//std::string string2 = "This is a test or something.\n";

uint8_t string_iterator = 0;
QueueHandle_t tx_queue;
SemaphoreHandle_t rx_sem = NULL;

void vALU(void *pvParameters){
    while(1){

    }
}

void vControl_Unit(void *pvParameters){
    UART
    while(1){
        if (xSemaphoreTake(rx_sem, portMAX_DELAY)){
            printf("started\n");
        }

    }
}

void vSwitchTest(void *pvParamters){
    auto sw = Switches::getInstance();
    auto led = LED_Display::getInstance();
    led.init();
    led.clear();
    sw.init();
    bool sw_prev_states[4] = {HIGH};
    bool sw_current_states[4] = {HIGH};
    operation op = add;
    while (1){
        for (int i = 0; i < 4; i++){
            sw_prev_states[i] = sw_current_states[i];
            sw_current_states[i] = sw.getSwitch(i + 1);
            if ((sw_current_states[i] == HIGH) && (sw_prev_states[i] == LOW)){
                //printf("sw%d pressed\n",i+1);
                switch(i){
                    case 0:
                        dig1 = (dig1 + 1) % 10;
                        printf("dig1: %d\n",dig1);
                        led.setNumber((dig1 * 10) + dig2);
                        break;
                    case 1:
                        dig2 = (dig2 + 1) % 10;
                        printf("dig2: %d\n",dig2);
                        led.setNumber((dig1 * 10) + dig2);
                        break;
                    case 2:
                        switch(op){
                            case add:
                                op = sub;
                                break;
                            case sub:
                                op = mult;
                                break;
                            case mult:
                                op = add;
                                break;
                        }
                        printf("op: %d\n",op);
                        break;
                    case 3:
                        xSemaphoreGive(rx_sem);
                        vTaskDelay(500);
                        break;

                }
            }
        }
    }
}

int main(){
    rx_sem = xSemaphoreCreateBinary();


    scheduler_add_task(new terminalTask(PRIORITY_HIGH));
    xTaskCreate(vSwitchTest,"Switch Test",1000, NULL,PRIORITY_LOW, NULL);
    xTaskCreate(vControl_Unit,"CU",1000, NULL,PRIORITY_LOW, NULL);

    scheduler_start();
    return -1;
}
