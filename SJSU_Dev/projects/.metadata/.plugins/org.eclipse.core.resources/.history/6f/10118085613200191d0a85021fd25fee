/*
 * GPIOInterrupt.cpp
 *
 *  Created on: Feb 16, 2019
 *      Author: Nick Schiffer
 */

#include "GPIOInterrupt.hpp"
#include <LPC17xx.h>
#include "GPIO_0_1_2.hpp"

GPIOInterrupt::GPIOInterrupt()
{
}

GPIOInterrupt& GPIOInterrupt::getInstance()
{
    static GPIOInterrupt instance;
    return instance;
}

void GPIOInterrupt::Initialize()
{
    NVIC_EnableIRQ(EINT3_IRQn);
}

bool GPIOInterrupt::AttachInterruptHandler(uint8_t port, uint32_t pin, IsrPointer pin_isr, InterruptCondition condition)
{
        switch(port){
            case 0:{
                //check if valid port 0 pin
                if ((((pin >= 0) && (pin <= 11)) || ((pin >= 15) && (pin <= 30)))){

                    //store ISR pointer in map
                    pin_isr_map[port][pin] = pin_isr;

                    switch(condition){
                        case kRisingEdge:
                            break;
                        case kFallingEdge:
                            break;
                        case kBothEdges:
                            break;
                        default:
                            return -1;
                    }

                }
                else
                    return 1;
                break;
            }
            case 2:{
                //check if valid port 2 pin
                if (((pin >= 0) && (pin <= 13))){
                    pin_isr_map[port][pin] = pin_isr;

                }
                else
                    return 1;
                break;
            }
            default:
                return 1;
        }
        return 0;
}



void GPIOInterrupt::HandleInterrupt()
{
}

GPIOInterrupt::~GPIOInterrupt()
{
}

