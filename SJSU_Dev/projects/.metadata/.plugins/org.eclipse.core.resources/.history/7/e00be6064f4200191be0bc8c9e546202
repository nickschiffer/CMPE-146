/*
 *  Nickolas Schiffer
 *  CMPE 146 S19
 *  Lab: UART: part0
 */

/**
 * @file
 * @brief This is the application entry point.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <LPC17xx.h>
#include "utilities.h"
#include "io.hpp"
#include <tasks.hpp>
#include <string.h>

#define TEST_STRING_LENGTH    29
#define BAUD_RATE          38400
uint16_t sys_clock = sys_get_cpu_clock();

char string[] = "This is a test or something.\n";
//std::string string2 = "This is a test or something.\n";

uint8_t string_iterator = 0;
QueueHandle_t tx_queue;

void my_uart2_rx_intr(void)
{
  // TODO: Queue your data and clear UART Rx interrupt
    printf("interrupted\n\n");
    char c;
    if (!(LPC_UART2->IIR & 1)
            && ((LPC_UART2->IIR >> 1) & (1 << 1))
            && !((LPC_UART2->IIR >> 1) & 1)){ //rx interrupt pending if bit 0 = 0 and [3:1] = 20

        c = LPC_UART2->RBR;
        xQueueSend(tx_queue, &c, 100);
        printf("Enqueuing %c\n", c);
    }
    vTaskDelay(100);
}

void init_my_uart2(void)
{
  // Init PINSEL, baud rate, frame size, etc.
    /*
     * Power on UART2 Device
     */
    LPC_SC->PCONP |= (1 << pconp_uart2);
    /*
     * Select Peripheral Clock
     */
    LPC_SC->PCLKSEL1 &= ~(0b11 << 16); // /4
    /*
     * Select TX2{17:16 => 10} and RX2 pins{19:18 => 10}
     */
    LPC_PINCON->PINSEL4 |=  (1 << 17);
    LPC_PINCON->PINSEL4 &= ~(1 << 16);
    LPC_PINCON->PINSEL4 |=  (1 << 19);
    LPC_PINCON->PINSEL4 &= ~(1 << 18);
    /*
     * Enable pullup on TX pin (2.8)
     */
    LPC_PINCON->PINSEL4 &= ~(0b11 << 16); //00
    /*
     * Set frame size to 8
     */
    LPC_UART2->LCR |= (0b11 << 0);
    /*
     * 1 Stop bit
     */
    LPC_UART2->LCR &= ~(1 << 2);
    /*
     * Disable Parity Bit
     */
    LPC_UART2->LCR &= ~(1 << 3);
    /*
     * Disable Break Control
     */
    LPC_UART2->LCR &= ~(1 << 6);
    /*
     * Set baud rate for 38400bps (see baud rate formula)
     */
    uint32_t pclk = sys_clock >> 2;
    uint16_t dl = (uint16_t)(pclk / ((uint16_t)BAUD_RATE << 4));
    /*
     * Set DLAB bit to 1 to access DLL and DLM registers
     */
    LPC_UART2->LCR |= (1 << 7);
    /*
     * Set DLM and DLL registers
     */
    LPC_UART2->DLL = (uint8_t)(dl & 0xFF);
    LPC_UART2->DLM = (uint8_t)((dl >> 8)&0xFF);
    printf("DLL: %X\nDLM: %X\n",(uint8_t)(dl & 0xFF), (uint8_t)((dl >> 8)&0xFF) );
    printf("pclk: %u\nsysclock: %u\n", pclk, sys_clock);
    /*
     * Enable RX Interrupt (need to set DLAB to 0 first)
     */
    LPC_UART2->LCR &= ~(1 << 7);
    LPC_UART2->IER |=  (1 << 0);
    /*
     * Start FIFO
     */
    LPC_UART2->FCR |= (1 << 0);
    /*
     * Enable TX
     */
    LPC_UART2->TER |= (1 << 7);
    /*
     * Enable RX Status Line Interrupts
     */
    //LPC_UART2->IER |= (1 << 2);




  // Init UART Rx interrupt (TX interrupt is optional)
  //isr_register(Uart2, my_uart2_rx_intr);
    isr_register(UART2_IRQn, my_uart2_rx_intr); //TODO figure out interrupts
}

void vUART_RX_print(void *pvParameters)
{
  char c;
  while (1) {
    if (xQueueReceive(tx_queue, &c, 1000)) {
      printf("%c", c);
    }
    else{
        printf("RX Queue Empty.\n\n");
    }
  }
}

void vUART_TX(void *pvParameters){
    while (1){
       char c;
       //printf("getting char\n");
       c = (string[string_iterator]);
       //printf("got char\n");
       while (!((LPC_UART2->LSR >> 5) & 1)); //wait until THRE is empty
       LPC_UART2->THR = c;
       //printf("Enqueuing %c\n", c);
       string_iterator = (string_iterator + 1) % 30;
       vTaskDelay(100);
    }

}

int main(void)
{
  scheduler_add_task(new terminalTask(PRIORITY_HIGH));
  strcpy(string, "This is a test or something.\n");
  tx_queue = xQueueCreate(TEST_STRING_LENGTH + 1, sizeof(char));
  init_my_uart2();
  xTaskCreate(vUART_RX_print,"UART print",1000, NULL,PRIORITY_LOW, NULL);
  xTaskCreate(vUART_TX,"UART TX",1000, NULL,PRIORITY_LOW, NULL);
  scheduler_start();
  return -1;
}
